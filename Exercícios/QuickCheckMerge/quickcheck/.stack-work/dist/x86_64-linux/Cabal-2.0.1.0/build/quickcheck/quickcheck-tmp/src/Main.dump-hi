
==================== FINAL INTERFACE ====================
2018-07-03 14:05:18.164618 UTC

interface main:Main 8022
  interface hash: d5c35bc6e39d9e51d713394aade35803
  ABI hash: 6f7274f906f9906831f4ffbee078c69a
  export-list hash: b46fbf993b1de3dd0b5d2bba0e87cf8e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e5bac1330dfd7953c51bdd73242ccc0d
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.merge
  Main.metade
  Main.msort
  Main.prop_idempotencia
  Main.prop_length
  Main.prop_minimum
  Main.prop_model
module dependencies:
package dependencies: QuickCheck-2.10.1 array-0.5.2.0
                      base-4.10.1.0* containers-0.5.10.2 deepseq-1.4.3.0
                      ghc-boot-th-8.2.2 ghc-prim-0.5.1.1 integer-gmp-1.0.1.0
                      pretty-1.1.3.3 primitive-0.6.4.0 random-1.1
                      template-haskell-2.12.0.0 tf-random-0.5 time-1.8.0.2
                      transformers-0.5.2.0
orphans: transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.10.1:Test.QuickCheck 0615fee573d7ebd8b2239421b64342c0
import  -/  QuickCheck-2.10.1:Test.QuickCheck.Property bbc6b0d496006067055dd3d18840bf44
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:Data.List 4ab7fa2a1b87502b23af891a384f0506
import  -/  base-4.10.1.0:Data.OldList 555420b092ca8cf0a8f9666bc0e07dcf
import  -/  base-4.10.1.0:Data.Tuple 8fa1305aa5032ea35e2a54fa5f1e78f9
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.List e3060fbeb44ce0038e6b4dedf2dd9cf1
import  -/  base-4.10.1.0:GHC.Real 3c62834bc25e762eabc44149c4cc142d
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 6e5bb580370d8d71dc5888f723cea4b4
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
e0c8bc81ddba6eaab42ca7687167011b
  $wmetade :: [a] -> (# [a], [a] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ @ a (w :: [a]) ->
                 case w of wild {
                   [] -> (# GHC.Types.[] @ a, GHC.Types.[] @ a #)
                   : x ds
                   -> case ds of wild1 {
                        [] -> (# GHC.Types.: @ a x (GHC.Types.[] @ a), GHC.Types.[] @ a #)
                        : ipv ipv1
                        -> let {
                             tam :: GHC.Types.Int
                             = case GHC.List.$wlenAcc @ a wild 0# of ww2 { DEFAULT ->
                               GHC.Types.I# ww2 }
                           } in
                           (# case tam of ww { GHC.Types.I# ww1 ->
                              let {
                                ww4 :: GHC.Prim.Int# = GHC.Prim.quotInt# ww1 2#
                              } in
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.<# 0# ww4) of wild2 {
                                GHC.Types.False -> GHC.Types.[] @ a
                                GHC.Types.True -> GHC.List.$wunsafeTake @ a ww4 wild } },
                              case tam of ww { GHC.Types.I# ww1 ->
                              let {
                                ww4 :: GHC.Prim.Int# = GHC.Prim.quotInt# ww1 2#
                              } in
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.<=# ww4 0#) of wild2 {
                                GHC.Types.False -> Main.$wunsafeDrop @ a ww4 wild
                                GHC.Types.True -> wild } } #) } }) -}
00bb2257859340c278f030fbdf7c8098
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
bd819afcf9d56c4b166722d4e2762456
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
51ab707fdcabdd95cc462b1e19bae3a9
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True) -}
279c978f793e047d51e01b795abce891
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main3) -}
80494ff25aec3ca8c8a0188b6f90c0c3
  main3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("hello world"#) -}
114ebf6d178921e659c0917dc16d6c2e
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
5d66651ca85bfeb9325153dc308bb7af
  merge :: GHC.Classes.Ord a => [a] -> [a] -> [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)><S,1*U><S,1*U> -}
a58baefed6842b795ad6d73fe458f1be
  metade :: [a] -> ([a], [a])
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: [a]) ->
                 case Main.$wmetade @ a w of ww { (#,#) ww1 ww2 -> (ww1, ww2) }) -}
e9aa74498c763998a315fcb96fd383a7
  msort :: GHC.Classes.Ord a => [a] -> [a]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)><S,1*U> -}
db5aa87f3708b1ffc4fd9f3292237d9f
  prop_idempotencia :: GHC.Classes.Ord a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(1*U(C(C1(U)),A),A,A,C(C1(U)),A,A,A,A)><S,U>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) (eta :: [a]) ->
                 GHC.Classes.$fEq[]_$c==
                   @ a
                   (GHC.Classes.$p1Ord @ a $dOrd)
                   (Main.msort @ a $dOrd (Main.msort @ a $dOrd eta))
                   (Main.msort @ a $dOrd eta)) -}
5657b0093c5219b043e78f73b18841e0
  prop_length :: GHC.Classes.Ord a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,C(C1(U)),A,A,A,A)><S,U>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) (xs :: [a]) ->
                 case GHC.List.$wlenAcc
                        @ a
                        (Main.msort @ a $dOrd xs)
                        0# of ww2 { DEFAULT ->
                 case GHC.List.$wlenAcc @ a xs 0# of ww1 { DEFAULT ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# ww2 ww1) } }) -}
5902f1edb70f9b4ce9f9acb8dfbe483a
  prop_minimum ::
    GHC.Classes.Ord a => [a] -> Test.QuickCheck.Property.Property
  {- Arity: 2,
     Strictness: <L,U(1*U(1*C1(C1(U)),A),A,A,C(C1(U)),A,A,A,C(C1(U)))><S,1*U>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) (eta :: [a]) ->
                 case eta of wild {
                   []
                   -> Test.QuickCheck.Property.$fTestableDiscard2
                        `cast`
                      (Trans
                           (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                     (Test.QuickCheck.Property.N:Prop[0])))
                           (Sym (Test.QuickCheck.Property.N:Property[0])))
                   : ds1 ds2
                   -> let {
                        x1 :: Test.QuickCheck.Property.Rose Test.QuickCheck.Property.Result
                        = Test.QuickCheck.Property.onRose
                            @ Test.QuickCheck.Property.Result
                            Test.QuickCheck.Property.$fTestable()1
                            (Test.QuickCheck.Property.MkRose
                               @ Test.QuickCheck.Property.Result
                               (case GHC.Classes.==
                                       @ a
                                       (GHC.Classes.$p1Ord @ a $dOrd)
                                       (case Main.msort @ a $dOrd wild of wild1 {
                                          [] -> GHC.List.badHead @ a : x ds4 -> x })
                                       (GHC.List.minimum @ a $dOrd wild) of wild1 {
                                  GHC.Types.False -> Test.QuickCheck.Property.counterexample1
                                  GHC.Types.True -> Test.QuickCheck.Property.succeeded })
                               (GHC.Types.[]
                                  @ (Test.QuickCheck.Property.Rose
                                       Test.QuickCheck.Property.Result)))
                      } in
                      (\ (ds :: Test.QuickCheck.Random.QCGen) (ds4 :: GHC.Types.Int) ->
                       x1)
                        `cast`
                      (Trans
                           (Sym (Test.QuickCheck.Gen.N:Gen[0]
                                     (Test.QuickCheck.Property.N:Prop[0])))
                           (Sym (Test.QuickCheck.Property.N:Property[0]))) }) -}
08bebd223755304fed369ea6bd0adfe5
  prop_model :: GHC.Classes.Ord a => [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(1*U(C(C1(U)),A),1*C(C1(U)),A,C(C1(U)),A,A,A,A)><S,U>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) (eta :: [a]) ->
                 GHC.Classes.$fEq[]_$c==
                   @ a
                   (GHC.Classes.$p1Ord @ a $dOrd)
                   (Main.msort @ a $dOrd eta)
                   (Data.OldList.sortBy @ a (GHC.Classes.compare @ a $dOrd) eta)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

