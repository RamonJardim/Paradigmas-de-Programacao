
==================== FINAL INTERFACE ====================
2018-08-21 14:48:54.253023866 UTC

interface main:Main 8043
  interface hash: 43f9c05f81c9ffbcf6697b27839ca709
  ABI hash: f3f68672772f622ab7f1bac04f421728
  export-list hash: 36513722bc9b5c4ba805ae77751e50fe
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 38d58f7600206cf1c92a0e8eb8f7ecf3
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.baseUrl
  Main.calcSim
  Main.getTitle
  Main.getURL
  Main.jaccard
  Main.main
  Main.normalizaTexto
  Main.resultadosBusca
  Main.substAcento
  Main.topN
module dependencies:
package dependencies: array-0.5.2.0 asn1-encoding-0.9.5
                      asn1-parse-0.9.4 asn1-types-0.3.2 async-2.2.1 base-4.11.1.0
                      basement-0.0.8 binary-0.8.5.1 blaze-builder-0.4.1.0
                      bytestring-0.10.8.2 case-insensitive-1.2.0.11 cereal-0.5.7.0
                      conduit-1.3.0.3 connection-0.2.8 containers-0.5.11.0 cookie-0.4.4
                      cryptonite-0.25 data-default-class-0.1.2.0 deepseq-1.4.3.0
                      directory-1.3.1.5 exceptions-0.10.0 filepath-1.4.2
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      hourglass-0.2.11 http-client-0.5.13.1 http-client-tls-0.3.5.3
                      http-conduit-2.3.2 http-types-0.12.1 integer-gmp-1.0.2.0
                      memory-0.14.16 mtl-2.2.2 network-2.6.3.6 network-uri-2.6.1.0
                      parsec-3.1.13.0 pem-0.2.4 primitive-0.6.3.0 resourcet-1.2.1
                      socks-0.5.6 stm-2.4.5.0 streaming-commons-0.2.1.0 tagsoup-0.14.6
                      template-haskell-2.13.0.0 text-1.2.3.0 time-1.8.0.2 tls-1.4.1
                      transformers-0.5.5.0 unix-2.7.2.2 unliftio-core-0.1.1.0 x509-1.7.3
                      x509-store-1.6.6 x509-system-1.6.6 x509-validation-1.6.10
                      zlib-0.6.2
orphans: http-client-0.5.13.1:Network.HTTP.Client.Request
         basement-0.0.8:Basement.UArray.Base basement-0.0.8:Basement.Block
         transformers-0.5.5.0:Control.Monad.Trans.Error
         network-2.6.3.6:Network.Socket time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.4.5.0:Control.Monad.STM
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         basement-0.0.8:Basement.Block.Base basement-0.0.8:Basement.Monad
                         basement-0.0.8:Basement.MutableBuilder basement-0.0.8:Basement.Nat
                         basement-0.0.8:Basement.NonEmpty
                         basement-0.0.8:Basement.Numerical.Subtractive
                         basement-0.0.8:Basement.PrimType basement-0.0.8:Basement.String
                         basement-0.0.8:Basement.String.Encoding.ASCII7
                         basement-0.0.8:Basement.String.Encoding.ISO_8859_1
                         basement-0.0.8:Basement.String.Encoding.UTF16
                         basement-0.0.8:Basement.String.Encoding.UTF32
                         basement-0.0.8:Basement.Types.OffsetSize
                         basement-0.0.8:Basement.UArray.Base
                         basement-0.0.8:Basement.UTF8.Base
                         conduit-1.3.0.3:Data.Conduit.Internal.Conduit
                         conduit-1.3.0.3:Data.Conduit.Internal.Pipe
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         cryptonite-0.25:Crypto.ECC cryptonite-0.25:Crypto.Error.Types
                         cryptonite-0.25:Crypto.Hash.Blake2
                         cryptonite-0.25:Crypto.Hash.Blake2b
                         cryptonite-0.25:Crypto.Hash.Blake2bp
                         cryptonite-0.25:Crypto.Hash.Blake2s
                         cryptonite-0.25:Crypto.Hash.Blake2sp
                         cryptonite-0.25:Crypto.Hash.Keccak cryptonite-0.25:Crypto.Hash.MD2
                         cryptonite-0.25:Crypto.Hash.MD4 cryptonite-0.25:Crypto.Hash.MD5
                         cryptonite-0.25:Crypto.Hash.RIPEMD160
                         cryptonite-0.25:Crypto.Hash.SHA1 cryptonite-0.25:Crypto.Hash.SHA224
                         cryptonite-0.25:Crypto.Hash.SHA256 cryptonite-0.25:Crypto.Hash.SHA3
                         cryptonite-0.25:Crypto.Hash.SHA384
                         cryptonite-0.25:Crypto.Hash.SHA512
                         cryptonite-0.25:Crypto.Hash.SHA512t
                         cryptonite-0.25:Crypto.Hash.SHAKE
                         cryptonite-0.25:Crypto.Hash.Skein256
                         cryptonite-0.25:Crypto.Hash.Skein512
                         cryptonite-0.25:Crypto.Hash.Tiger
                         cryptonite-0.25:Crypto.Hash.Whirlpool
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         http-client-0.5.13.1:Network.HTTP.Client
                         network-uri-2.6.1.0:Network.URI
                         primitive-0.6.3.0:Control.Monad.Primitive
                         resourcet-1.2.1:Control.Monad.Trans.Resource.Internal
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         zlib-0.6.2:Codec.Compression.Zlib.Stream
import  -/  async-2.2.1:Control.Concurrent.Async c352e85ce80f0fac8beeb30b50401a99
import  -/  base-4.11.1.0:Control.Concurrent ef40f102578b6e7296c2a2358b631ee7
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Unicode 8234c40b59f035e845832a42e8725a00
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  bytestring-0.10.8.2:Data.ByteString bcedf8f5f0afe34103d2b261303f5ff3
import  -/  bytestring-0.10.8.2:Data.ByteString.Internal 0b7b83fbf9714d7fb832fbb905af4a0b
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 8fd50da86fe790bb8a7b082831709ebf
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  http-conduit-2.3.2:Network.HTTP.Conduit d8b4b5144e4285cdc3d6ad7649bb9046
import  -/  tagsoup-0.14.6:Text.HTML.TagSoup 18823ae5a5d7a88d8ce738a96b1745e8
import  -/  tagsoup-0.14.6:Text.HTML.TagSoup.Parser 08e3d4f62495141c17ebdf2bf3ddc54b
import  -/  tagsoup-0.14.6:Text.HTML.TagSoup.Type 39564cc0813693acbf20a3cfcf2c08ec
import  -/  text-1.2.3.0:Data.Text 4f359e32d6f1c9011b171e00ff8fb023
import  -/  text-1.2.3.0:Data.Text.Encoding 9dcd39b28394d1437e8beb9481dbe4a3
import  -/  text-1.2.3.0:Data.Text.IO 52977d123b55062cf6e5b7787e734750
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
c667913333916d712a361431695d01c4
  $w$sjaccard ::
    [Data.Text.Internal.Text]
    -> [Data.Text.Internal.Text] -> GHC.Prim.Double#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: [Data.Text.Internal.Text])
                   (w1 :: [Data.Text.Internal.Text]) ->
                 case GHC.List.$wlenAcc
                        @ Data.Text.Internal.Text
                        (Data.OldList.intersectBy
                           @ Data.Text.Internal.Text
                           Data.Text.$fEqText_$c==
                           w
                           w1)
                        0# of ww2 { DEFAULT ->
                 case GHC.List.$wlenAcc
                        @ Data.Text.Internal.Text
                        (Data.OldList.unionBy
                           @ Data.Text.Internal.Text
                           Data.Text.$fEqText_$c==
                           w
                           w1)
                        0# of ww1 { DEFAULT ->
                 GHC.Prim./##
                   (GHC.Prim.int2Double# ww2)
                   (GHC.Prim.int2Double# ww1) } }) -}
ee803d760e38a070dcf082222a59e8c8
  $wentityAttrib ::
    (Data.ByteString.Internal.ByteString, GHC.Types.Bool)
    -> (# Data.ByteString.Internal.ByteString,
          [Text.HTML.TagSoup.Type.Tag Data.ByteString.Internal.ByteString] #)
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>, Inline: [0],
     Unfolding: (\ (w2 :: (Data.ByteString.Internal.ByteString,
                           GHC.Types.Bool)) ->
                 let {
                   x :: Data.ByteString.Internal.ByteString
                   = case w2 of wild { (,) x1 b -> x1 }
                 } in
                 case GHC.Base.mappend
                        @ Data.ByteString.Internal.ByteString
                        Data.ByteString.Internal.$fMonoidByteString
                        x
                        (case w2 of wild { (,) x1 b ->
                         case b of wild1 {
                           GHC.Types.False
                           -> case Main.resultadosBusca4 of v { GHC.Types.I# v1 ->
                              Data.ByteString.Internal.$wunsafePackLenChars
                                v1
                                (GHC.Types.[] @ GHC.Types.Char) }
                           GHC.Types.True
                           -> case Main.resultadosBusca3 of v { GHC.Types.I# v1 ->
                              Data.ByteString.Internal.$wunsafePackLenChars
                                v1
                                Text.HTML.TagSoup.Options.parseOptions1 } } }) of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 case Text.HTML.TagSoup.Entity.lookupEntity
                        (Data.ByteString.Internal.$wunpackAppendCharsLazy
                           ww1
                           ww2
                           ww3
                           ww4
                           (GHC.Types.[] @ GHC.Types.Char)) of wild {
                   GHC.Base.Nothing
                   -> (# GHC.Base.mappend
                           @ Data.ByteString.Internal.ByteString
                           Data.ByteString.Internal.$fMonoidByteString
                           Main.resultadosBusca_lvl
                           ww,
                         GHC.Types.:
                           @ (Text.HTML.TagSoup.Type.Tag Data.ByteString.Internal.ByteString)
                           (Text.HTML.TagSoup.Type.TagWarning
                              @ Data.ByteString.Internal.ByteString
                              (GHC.Base.mappend
                                 @ Data.ByteString.Internal.ByteString
                                 Data.ByteString.Internal.$fMonoidByteString
                                 Main.resultadosBusca_lvl1
                                 x))
                           (GHC.Types.[]
                              @ (Text.HTML.TagSoup.Type.Tag
                                   Data.ByteString.Internal.ByteString)) #)
                   GHC.Base.Just a1
                   -> (# Data.ByteString.Internal.packChars a1,
                         GHC.Types.[]
                           @ (Text.HTML.TagSoup.Type.Tag
                                Data.ByteString.Internal.ByteString) #) } }) -}
1a0d00a4cab6a8a319dd25b4e4b886df
  $wjaccard :: GHC.Classes.Eq a => [a] -> [a] -> GHC.Prim.Double#
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C(U)),A)><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (w1 :: [a])
                   (w2 :: [a]) ->
                 case GHC.List.$wlenAcc
                        @ a
                        (Data.OldList.intersectBy @ a (GHC.Classes.== @ a w) w1 w2)
                        0# of ww2 { DEFAULT ->
                 case GHC.List.$wlenAcc
                        @ a
                        (Data.OldList.unionBy @ a (GHC.Classes.== @ a w) w1 w2)
                        0# of ww1 { DEFAULT ->
                 GHC.Prim./##
                   (GHC.Prim.int2Double# ww2)
                   (GHC.Prim.int2Double# ww1) } }) -}
195f735c86dceb32caefa484f4dede71
  $wlvl ::
    GHC.Prim.Double#
    -> Data.Text.Internal.Text
    -> GHC.Prim.Double#
    -> Data.Text.Internal.Text
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U,U,U)><S,U><L,1*U(U,U,U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: GHC.Prim.Double#)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case GHC.Prim.<## ww ww2 of lwild {
                   DEFAULT
                   -> case GHC.Prim.==## ww ww2 of lwild1 {
                        DEFAULT -> GHC.Types.GT
                        1# -> Data.Text.$fOrdText_$ccompare ww1 ww3 }
                   1# -> GHC.Types.LT }) -}
f96ac66b36c857650444b15d0b287b2d
  $wnormalizaTexto ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> Data.Text.Internal.Text
  {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [0] -}
ec950bf16dc0861a9f19f540685d2316
  $wsubstAcento :: GHC.Prim.Char# -> GHC.Prim.Char#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Char#) ->
                 case ww of ds4 {
                   DEFAULT -> ds4
                   '\224'# -> 'a'#
                   '\225'# -> 'a'#
                   '\227'# -> 'a'#
                   '\231'# -> 'c'#
                   '\233'# -> 'e'#
                   '\237'# -> 'i'#
                   '\243'# -> 'o'#
                   '\245'# -> 'o'#
                   '\250'# -> 'u'# }) -}
fbb4672b8561e427b8157d7b604b6347
  $wtopN ::
    GHC.Prim.Int#
    -> Data.Text.Internal.Text
    -> [Data.Text.Internal.Text]
    -> [(GHC.Types.Double, Data.Text.Internal.Text)]
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,U(U,U,U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Data.Text.Internal.Text)
                   (w1 :: [Data.Text.Internal.Text]) ->
                 case GHC.Prim.<# 0# ww of lwild {
                   DEFAULT
                   -> GHC.Types.[] @ (GHC.Types.Double, Data.Text.Internal.Text)
                   1#
                   -> letrec {
                        go3 :: [Data.Text.Internal.Text]
                               -> [(GHC.Types.Double, Data.Text.Internal.Text)]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds4 :: [Data.Text.Internal.Text]) ->
                          case ds4 of wild {
                            [] -> GHC.Types.[] @ (GHC.Types.Double, Data.Text.Internal.Text)
                            : y ys
                            -> GHC.Types.:
                                 @ (GHC.Types.Double, Data.Text.Internal.Text)
                                 (Main.calcSim w y, y)
                                 (go3 ys) }
                      } in
                      GHC.List.$wunsafeTake
                        @ (GHC.Types.Double, Data.Text.Internal.Text)
                        ww
                        (GHC.List.reverse1
                           @ (GHC.Types.Double, Data.Text.Internal.Text)
                           (Data.OldList.sortBy
                              @ (GHC.Types.Double, Data.Text.Internal.Text)
                              Main.topN1
                              (go3 w1))
                           (GHC.Types.[] @ (GHC.Types.Double, Data.Text.Internal.Text))) }) -}
00bb2257859340c278f030fbdf7c8098
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
e0bed6b1576dfa5d412e932811890e15
  baseUrl :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.baseUrl1) -}
3867f0b51b959d4b45e226c81a7c877e
  baseUrl1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("http://www.boatos.org/?s="#) -}
57563a1784c126425e6dbf282e27e48a
  calcSim ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text -> GHC.Types.Double
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><L,1*U(U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (t1 :: Data.Text.Internal.Text)
                   (t2 :: Data.Text.Internal.Text) ->
                 case t1 of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                 let {
                   arr :: Data.Text.Array.Array = Data.Text.Array.Array dt
                 } in
                 let {
                   len :: GHC.Types.Int = GHC.Types.I# dt2
                 } in
                 letrec {
                   loop :: GHC.Types.Int -> GHC.Types.Int -> [Data.Text.Internal.Text]
                     {- Arity: 2 -}
                   = \ (start :: GHC.Types.Int) (n :: GHC.Types.Int) ->
                     case start of start1 { GHC.Types.I# ipv ->
                     case n of n1 { GHC.Types.I# ipv1 ->
                     let {
                       ds4 :: Data.Text.Unsafe.Iter
                       = let {
                           j :: GHC.Prim.Int# = GHC.Prim.+# dt1 ipv1
                         } in
                         let {
                           m :: GHC.Word.Word16
                           = case GHC.Prim.indexWord16Array# dt j of r# { DEFAULT ->
                             GHC.Word.W16# r# }
                         } in
                         case GHC.Word.ltWord16 m (GHC.Word.W16# 55296##) of wild1 {
                           GHC.Types.False
                           -> case GHC.Word.gtWord16 m (GHC.Word.W16# 56319##) of wild2 {
                                GHC.Types.False
                                -> case m of wild3 { GHC.Word.W16# a# ->
                                   case GHC.Prim.indexWord16Array#
                                          dt
                                          (GHC.Prim.+# j 1#) of r# { DEFAULT ->
                                   Data.Text.Unsafe.$WIter
                                     (GHC.Types.C#
                                        (GHC.Prim.chr#
                                           (GHC.Prim.+#
                                              (GHC.Prim.+#
                                                 (GHC.Prim.uncheckedIShiftL#
                                                    (GHC.Prim.-# (GHC.Prim.word2Int# a#) 55296#)
                                                    10#)
                                                 (GHC.Prim.-# (GHC.Prim.word2Int# r#) 56320#))
                                              65536#)))
                                     (GHC.Types.I# 2#) } }
                                GHC.Types.True
                                -> case m of wild3 { GHC.Word.W16# w# ->
                                   Data.Text.Unsafe.$WIter
                                     (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# w#)))
                                     (GHC.Types.I# 1#) } }
                           GHC.Types.True
                           -> case m of wild2 { GHC.Word.W16# w# ->
                              Data.Text.Unsafe.$WIter
                                (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# w#)))
                                (GHC.Types.I# 1#) } }
                     } in
                     let {
                       d :: GHC.Types.Int
                       = case ds4 of wild1 { Data.Text.Unsafe.Iter dt3 dt4 ->
                         GHC.Types.I# dt4 }
                     } in
                     case GHC.Classes.geInt n1 len of wild1 {
                       GHC.Types.False
                       -> case ds4 of wild2 { Data.Text.Unsafe.Iter dt3 dt4 ->
                          case GHC.Unicode.isSpace (GHC.Types.C# dt3) of wild3 {
                            GHC.Types.False
                            -> loop
                                 start1
                                 (case d of wild4 { GHC.Types.I# y ->
                                  GHC.Types.I# (GHC.Prim.+# ipv1 y) })
                            GHC.Types.True
                            -> case GHC.Classes.eqInt start1 n1 of wild4 {
                                 GHC.Types.False
                                 -> GHC.Types.:
                                      @ Data.Text.Internal.Text
                                      (Data.Text.Internal.$WText
                                         arr
                                         (GHC.Types.I# (GHC.Prim.+# ipv dt1))
                                         (GHC.Types.I# (GHC.Prim.-# ipv1 ipv)))
                                      (loop
                                         (case d of wild5 { GHC.Types.I# y ->
                                          GHC.Types.I# (GHC.Prim.+# ipv1 y) })
                                         (case d of wild5 { GHC.Types.I# y ->
                                          GHC.Types.I# (GHC.Prim.+# ipv1 y) }))
                                 GHC.Types.True
                                 -> loop
                                      (GHC.Types.I# (GHC.Prim.+# ipv 1#))
                                      (GHC.Types.I# (GHC.Prim.+# ipv 1#)) } } }
                       GHC.Types.True
                       -> case GHC.Classes.eqInt start1 n1 of wild2 {
                            GHC.Types.False
                            -> GHC.Base.build
                                 @ Data.Text.Internal.Text
                                 (\ @ a
                                    (c :: Data.Text.Internal.Text -> a -> a)[OneShot]
                                    (n2 :: a)[OneShot] ->
                                  c (Data.Text.Internal.$WText
                                       arr
                                       (GHC.Types.I# (GHC.Prim.+# ipv dt1))
                                       (GHC.Types.I# (GHC.Prim.-# ipv1 ipv)))
                                    n2)
                            GHC.Types.True -> GHC.Types.[] @ Data.Text.Internal.Text } } } }
                 } in
                 Main.calcSim_$sjaccard
                   (loop (GHC.Types.I# 0#) (GHC.Types.I# 0#))
                   (Data.Text.words t2) }) -}
aaaea96da6ed8eb7f450eeb9a9c1f647
  calcSim_$sjaccard ::
    [Data.Text.Internal.Text]
    -> [Data.Text.Internal.Text] -> GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [Data.Text.Internal.Text])
                   (w1 :: [Data.Text.Internal.Text]) ->
                 case Main.$w$sjaccard w w1 of ww { DEFAULT -> GHC.Types.D# ww }) -}
4d1f6f2271eecdcdd68e9e74b4cada05
  getTitle ::
    Text.HTML.TagSoup.Type.Tag Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds4 :: Text.HTML.TagSoup.Type.Tag
                             Data.ByteString.Internal.ByteString) ->
                 case ds4 of wild {
                   DEFAULT -> Data.ByteString.empty
                   Text.HTML.TagSoup.Type.TagOpen s as
                   -> case Main.getTitle_unsafeDrop
                             @ (Text.HTML.TagSoup.Type.Attribute
                                  Data.ByteString.Internal.ByteString)
                             Main.getTitle_n
                             as of wild1 {
                        []
                        -> case GHC.List.badHead
                           ret_ty Data.ByteString.Internal.ByteString
                           of {}
                        : x ds5 -> case x of wild2 { (,) ds6 y -> y } } }) -}
724f02e14430d98b6458698f5932d5cf
  getTitle_n :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
ec819a1c388d5affac25f12a254da705
  getTitle_unsafeDrop :: GHC.Types.Int -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(1*U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a1 (w :: GHC.Types.Int) (w1 :: [a1]) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$wunsafeDrop @ a1 ww1 w1 }) -}
d98abcdb15f67a3ee0e5605b30ea2370
  getURL ::
    GHC.Base.String -> GHC.Types.IO Data.ByteString.Internal.ByteString
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getURL1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.ByteString.Internal.ByteString>_R)) -}
3e6868fc595e092a2d4f2ad670377a13
  getURL1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Internal.ByteString #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (url :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Network.HTTP.Conduit.simpleHttp
                         @ GHC.Types.IO
                         Control.Monad.IO.Class.$fMonadIOIO
                         url)
                        `cast`
                      (GHC.Types.N:IO[0] <Data.ByteString.Lazy.Internal.ByteString>_R)
                        s of ds4 { (#,#) ipv ipv1 ->
                 (# ipv, Data.ByteString.Lazy.toStrict ipv1 #) }) -}
9df53376b6cf8018bfa71e1eec447a09
  jaccard :: GHC.Classes.Eq a => [a] -> [a] -> GHC.Types.Double
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C(U)),A)><S,U><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a (w :: GHC.Classes.Eq a) (w1 :: [a]) (w2 :: [a]) ->
                 case Main.$wjaccard @ a w w1 w2 of ww { DEFAULT ->
                 GHC.Types.D# ww }) -}
b4f9ae97a091b232a88173a93240314d
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
2ae627898cff160a4ab35ad5461925fa
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
7aabbd2bc724528d983431e9e04c0548
  normalizaTexto ::
    Data.Text.Internal.Text -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Text.Internal.Text) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Main.$wnormalizaTexto ww1 ww2 ww3 }) -}
d5719f73ef805d8665a8df25792729ae
  resultadosBusca ::
    GHC.Base.String
    -> GHC.Types.IO [Data.ByteString.Internal.ByteString]
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.resultadosBusca1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <[Data.ByteString.Internal.ByteString]>_R)) -}
229f880a83399c4cdcf17acc63ae4669
  resultadosBusca1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [Data.ByteString.Internal.ByteString] #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (url :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Network.HTTP.Conduit.simpleHttp
                         @ GHC.Types.IO
                         Control.Monad.IO.Class.$fMonadIOIO
                         url)
                        `cast`
                      (GHC.Types.N:IO[0] <Data.ByteString.Lazy.Internal.ByteString>_R)
                        s of ds4 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case Text.HTML.TagSoup.sections1
                           @ (Text.HTML.TagSoup.Type.Tag Data.ByteString.Internal.ByteString)
                           (Text.HTML.TagSoup.Implementation.$woutput
                              @ Data.ByteString.Internal.ByteString
                              Text.StringLike.$fStringLikeByteString0
                              GHC.Types.False
                              GHC.Types.False
                              Main.resultadosBusca5
                              Main.resultadosBusca_entityAttrib
                              GHC.Types.True
                              (Text.HTML.TagSoup.Specification.dat
                                 (case Text.HTML.TagSoup.Implementation.$wexpand
                                         1#
                                         1#
                                         (case Data.ByteString.Lazy.toStrict_goLen0
                                                 ipv1
                                                 ipv1 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                                          Data.ByteString.Internal.$wunpackAppendCharsLazy
                                            ww1
                                            ww2
                                            ww3
                                            ww4
                                            (GHC.Types.[]
                                               @ GHC.Types.Char) }) of ww5 { (#,,,,,#) ww6 ww7 ww8 ww9 ww10 ww11 ->
                                  Text.HTML.TagSoup.Implementation.S
                                    ww6
                                    ww7
                                    ww8
                                    ww9
                                    ww10
                                    ww11 }))) of wild {
                      []
                      -> case GHC.List.init2
                         ret_ty [Data.ByteString.Internal.ByteString]
                         of {}
                      : x xs
                      -> Main.resultadosBusca_go
                           (GHC.List.init1
                              @ [Text.HTML.TagSoup.Type.Tag Data.ByteString.Internal.ByteString]
                              x
                              xs) } #) }) -}
9ce3999152f7943e391ca10701592198
  resultadosBusca2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Internal.ByteString #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        1#
                        s of ds4 { (#,#) ipv ipv1 ->
                 let {
                   ipv2 :: GHC.Prim.Addr#
                   = GHC.Prim.byteArrayContents#
                       ipv1
                         `cast`
                       (UnsafeCo representational (GHC.Prim.MutableByteArray#
                                                     GHC.Prim.RealWorld) GHC.Prim.ByteArray#)
                 } in
                 case GHC.Prim.writeWord8OffAddr#
                        @ GHC.Prim.RealWorld
                        ipv2
                        0#
                        38##
                        ipv of s2 { DEFAULT ->
                 let {
                   ipv3 :: GHC.ForeignPtr.ForeignPtrContents
                   = GHC.ForeignPtr.PlainPtr ipv1
                 } in
                 case GHC.Prim.touch#
                        @ 'GHC.Types.LiftedRep
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ipv3
                        s2 of s' { DEFAULT ->
                 (# s', Data.ByteString.Internal.PS ipv2 ipv3 0# 1# #) } } }) -}
c19a031930be58c4a50ea50555c059ca
  resultadosBusca3 :: GHC.Types.Int
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ GHC.Types.Char
                        Text.HTML.TagSoup.Options.parseOptions1
                        0# of v { DEFAULT ->
                 GHC.Types.I# v }) -}
edd50534634c361db0211cc80c4e6790
  resultadosBusca4 :: GHC.Types.Int
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ GHC.Types.Char
                        (GHC.Types.[] @ GHC.Types.Char)
                        0# of v { DEFAULT ->
                 GHC.Types.I# v }) -}
0e6de2219bfc75fba858188fa983ec58
  resultadosBusca5 ::
    (Data.ByteString.Internal.ByteString, GHC.Types.Bool)
    -> [Text.HTML.TagSoup.Type.Tag Data.ByteString.Internal.ByteString]
  {- Arity: 1, Strictness: <L,U(U,U)>m2,
     Unfolding: (\ (x :: (Data.ByteString.Internal.ByteString,
                          GHC.Types.Bool)) ->
                 let {
                   ds4 :: (Data.ByteString.Internal.ByteString,
                           [Text.HTML.TagSoup.Type.Tag Data.ByteString.Internal.ByteString])
                   = case Main.$wentityAttrib x of ww { (#,#) ww1 ww2 -> (ww1, ww2) }
                 } in
                 GHC.Types.:
                   @ (Text.HTML.TagSoup.Type.Tag Data.ByteString.Internal.ByteString)
                   (Text.HTML.TagSoup.Type.TagText
                      @ Data.ByteString.Internal.ByteString
                      (case ds4 of wild { (,) a b -> a }))
                   (case ds4 of wild { (,) a b -> b })) -}
9292f5a5545df6351703d55308afacd4
  resultadosBusca_entityAttrib ::
    (Data.ByteString.Internal.ByteString, GHC.Types.Bool)
    -> (Data.ByteString.Internal.ByteString,
        [Text.HTML.TagSoup.Type.Tag Data.ByteString.Internal.ByteString])
  {- Arity: 1, Strictness: <L,U(U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w2 :: (Data.ByteString.Internal.ByteString, GHC.Types.Bool)) ->
                 case Main.$wentityAttrib w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
82863c89396e76d7151f9b1b35ee633f
  resultadosBusca_go ::
    [[Text.HTML.TagSoup.Type.Tag Data.ByteString.Internal.ByteString]]
    -> [Data.ByteString.Internal.ByteString]
  {- Arity: 1, Strictness: <S,1*U> -}
b4d5b22041d31c93b0bcb48784c2e86a
  resultadosBusca_lvl :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.ByteString.Internal.ByteString #)
                        Main.resultadosBusca2 of ds4 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
8bab8eee321bd384c31c035301dc8139
  resultadosBusca_lvl1 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ GHC.Types.Char
                        Text.HTML.TagSoup.Options.parseOptions3
                        0# of ww { DEFAULT ->
                 Data.ByteString.Internal.$wunsafePackLenChars
                   ww
                   Text.HTML.TagSoup.Options.parseOptions3 }) -}
e653a3df463dfb657e0a5925e691629f
  substAcento :: GHC.Types.Char -> GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Char) ->
                 case w of ww { GHC.Types.C# ww1 ->
                 case Main.$wsubstAcento ww1 of ww2 { DEFAULT ->
                 GHC.Types.C# ww2 } }) -}
394c97d5ab321775392d5162e67b2f1a
  topN ::
    GHC.Types.Int
    -> Data.Text.Internal.Text
    -> [Data.Text.Internal.Text]
    -> [(GHC.Types.Double, Data.Text.Internal.Text)]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><L,U(U,U,U)><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Data.Text.Internal.Text)
                   (w2 :: [Data.Text.Internal.Text]) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wtopN ww1 w1 w2 }) -}
4ab50d2c63f32c683dbd588e19ff513a
  topN1 ::
    (GHC.Types.Double, Data.Text.Internal.Text)
    -> (GHC.Types.Double, Data.Text.Internal.Text)
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U,U,U))><S(S(S)L),1*U(1*U(U),1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (GHC.Types.Double, Data.Text.Internal.Text))
                   (w1 :: (GHC.Types.Double, Data.Text.Internal.Text)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.D# ww4 ->
                 case w1 of ww5 { (,) ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.D# ww9 ->
                 Main.$wlvl ww4 ww2 ww9 ww7 } } } }) -}
"SPEC jaccard @ Text" forall ($dEq :: GHC.Classes.Eq
                                        Data.Text.Internal.Text)
  Main.jaccard @ Data.Text.Internal.Text $dEq
  = Main.calcSim_$sjaccard
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

