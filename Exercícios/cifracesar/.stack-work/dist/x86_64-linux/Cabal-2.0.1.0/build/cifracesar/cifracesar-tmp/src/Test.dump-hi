
==================== FINAL INTERFACE ====================
2018-07-03 14:39:08.280776 UTC

interface main:Test 8022
  interface hash: b317fffb960b9cd3bf8c2115d1937688
  ABI hash: 0750b7ebd251fead5d1ccb0495653441
  export-list hash: 39fa00c0cf6564613b038e5506e340ea
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f7e7d7363c2d126ea640e0c16f0cc38a
  sig of: Nothing
  used TH splices: False
  where
exports:
  Test.prop_enc_length
  Test.prop_neg_shift
module dependencies: Cesar
package dependencies: base-4.10.1.0* ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0
orphans: base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Type.Equality base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Data.Foldable 9ed87455d68e87ff2b5b8725eae9897e
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  Cesar 727d0895100925600165d13ac595561f
  exports: bfba25f229b3631e058c125ebeecd6e6
  encode cad71b2177444aaa5a20c055741e64ee
  shift d3d8298a503ead466457e736932fe0b0
49c2f880e698462b6c9e783f080761f8
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Test.$trModule3 Test.$trModule1) -}
84be1bc9e8181ea2b66be9295e013b7d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Test.$trModule2) -}
36c414f14f0c10df99c6e1d2777fb53b
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Test"#) -}
9897ca6dc8e2f5018c527b2ff9c21a82
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Test.$trModule4) -}
86b68bf5db6f60bdb36b780cec21b3ed
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
cfa536a419867b167ae313d4c6c9e328
  $wprop_enc_length :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char w 0# of ww2 { DEFAULT ->
                 letrec {
                   $wgo :: [GHC.Types.Char] -> GHC.Prim.Int# -> GHC.Types.Bool
                     <join 2> {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
                   = \ (w1 :: [GHC.Types.Char]) (ww :: GHC.Prim.Int#) ->
                     case w1 of wild {
                       [] -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# ww2 ww)
                       : y ys -> $wgo ys (GHC.Prim.+# ww 1#) }
                 } in
                 $wgo w 0# }) -}
802f24757518ea9efcdb17c94709aa26
  $wprop_neg_shift ::
    GHC.Types.Int -> GHC.Prim.Char# -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U(U)><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int) (ww :: GHC.Prim.Char#) ->
                 case Cesar.$wshift
                        (case w of wild { GHC.Types.I# x ->
                         GHC.Types.I# (GHC.Prim.negateInt# x) })
                        ww of ww2 { DEFAULT ->
                 case Cesar.$wshift w ww2 of ww1 { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.eqChar# ww ww1) } }) -}
9a3a9e4f461f9b6aa889a2f0a560ef8f
  prop_enc_length ::
    GHC.Types.Int -> GHC.Base.String -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, True)
                (\ (w :: GHC.Types.Int) (w1 :: GHC.Base.String) ->
                 Test.$wprop_enc_length w1) -}
658fd5e688fab0bbda472da2ca6797b3
  prop_neg_shift :: GHC.Types.Int -> GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U(U)><S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GHC.Types.Char) ->
                 case w1 of ww { GHC.Types.C# ww1 ->
                 Test.$wprop_neg_shift w ww1 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

